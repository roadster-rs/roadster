---
source: src/api/cli/roadster/print_config.rs
expression: serialized
---
AppConfig { environment: Test, app: App { name: "Test", shutdown_on_error: true }, lifecycle_handler: LifecycleHandler { default_enable: true, db_migration: LifecycleHandlerConfig { common: CommonConfig { enable: None, priority: 0 }, custom: EmptyConfig }, db_graceful_shutdown: LifecycleHandlerConfig { common: CommonConfig { enable: None, priority: 10000 }, custom: EmptyConfig }, custom: {} }, health_check: HealthCheck { default_enable: true, max_duration: MaxDuration { startup: 60s, api: 1s, cli: 10s }, database: HealthCheckConfig { common: CommonConfig { enable: None }, custom: EmptyConfig }, sidekiq: HealthCheckConfig { common: CommonConfig { enable: None }, custom: EmptyConfig }, smtp: HealthCheckConfig { common: CommonConfig { enable: None }, custom: EmptyConfig }, custom: {} }, service: Service { default_enable: true, http: ServiceConfig { common: CommonConfig { enable: None }, custom: HttpServiceConfig { url: None, address: Address { scheme: "http", host: "127.0.0.1", port: 3000 }, middleware: Middleware { default_enable: true, sensitive_request_headers: MiddlewareConfig { common: CommonConfig { enable: None, priority: -10000 }, custom: SensitiveRequestHeadersConfig { common: CommonSensitiveHeadersConfig { header_names: ["authorization", "refresh-token", "x-refresh-token", "proxy-authorization", "cookie", "set-cookie"] } } }, sensitive_response_headers: MiddlewareConfig { common: CommonConfig { enable: None, priority: 10000 }, custom: SensitiveResponseHeadersConfig { common: CommonSensitiveHeadersConfig { header_names: ["authorization", "refresh-token", "x-refresh-token", "proxy-authorization", "cookie", "set-cookie"] } } }, set_request_id: MiddlewareConfig { common: CommonConfig { enable: None, priority: -9990 }, custom: SetRequestIdConfig { common: CommonRequestIdConfig { header_name: "request-id" } } }, propagate_request_id: MiddlewareConfig { common: CommonConfig { enable: None, priority: 9990 }, custom: PropagateRequestIdConfig { common: CommonRequestIdConfig { header_name: "request-id" } } }, tracing: MiddlewareConfig { common: CommonConfig { enable: None, priority: -9980 }, custom: TracingConfig { request_headers_allow_all: false, response_headers_allow_all: false, query_params_allow_all: false, request_header_names: [], response_header_names: [], query_param_names: [] } }, catch_panic: MiddlewareConfig { common: CommonConfig { enable: None, priority: 0 }, custom: CatchPanicConfig }, response_compression: MiddlewareConfig { common: CommonConfig { enable: None, priority: 0 }, custom: ResponseCompressionConfig }, request_decompression: MiddlewareConfig { common: CommonConfig { enable: None, priority: -9960 }, custom: RequestDecompressionConfig }, timeout: MiddlewareConfig { common: CommonConfig { enable: None, priority: 0 }, custom: TimeoutConfig { timeout: 10s } }, size_limit: MiddlewareConfig { common: CommonConfig { enable: None, priority: -9970 }, custom: SizeLimitConfig { limit: Byte(5000000) } }, cors: MiddlewareConfig { common: CommonConfig { enable: None, priority: -9950 }, custom: CorsConfig { preset: Restrictive, allow_credentials: None, allow_private_network: None, max_age: 3600s, allow_headers: None, allow_methods: None, allow_origins: None, expose_headers: None, vary: None } }, request_response_logging: MiddlewareConfig { common: CommonConfig { enable: None, priority: 0 }, custom: RequestResponseLoggingConfig { max_len: 1000, content_types: None, content_types_req: None, content_types_res: None } }, cache_control: MiddlewareConfig { common: CommonConfig { enable: None, priority: 0 }, custom: CacheControlConfig { max_age: 604800s, content_types: {} } }, etag: MiddlewareConfig { common: CommonConfig { enable: None, priority: 0 }, custom: EtagConfig }, custom: {} }, initializer: Initializer { default_enable: true, normalize_path: InitializerConfig { common: CommonConfig { enable: None, priority: 10000 }, custom: NormalizePathConfig }, custom: {} }, default_routes: DefaultRoutes { default_enable: true, ping: DefaultRouteConfig { enable: None, route: "_ping" }, health: DefaultRouteConfig { enable: None, route: "_health" }, api_schema: DefaultRouteConfig { enable: None, route: "_docs/api.json" }, scalar: DefaultRouteConfig { enable: None, route: "_docs" }, redoc: DefaultRouteConfig { enable: None, route: "_docs/redoc" } } } }, grpc: ServiceConfig { common: CommonConfig { enable: None }, custom: GrpcServiceConfig { address: Address { scheme: "http", host: "127.0.0.1", port: 3001 } } }, worker: WorkerServiceConfig { enqueue_config: EnqueueConfig { queue: None, custom: CustomConfig { inner: {} } }, worker_config: WorkerConfig { timeout: Some(true), max_duration: Some(60s), retry_config: Some(RetryConfig { max_retries: Some(25), delay: None, delay_offset: None, max_delay: None, backoff_strategy: None }), sidekiq: None, pg: Some(PgWorkerConfig { success_action: Some(Delete), failure_action: Some(Archive) }), custom: CustomConfig { inner: {} } }, sidekiq: ServiceConfig { common: CommonConfig { enable: None }, custom: WorkerConfig { common: CommonConfig { num_workers: 16, balance_strategy: RoundRobin, queues: None, queue_config: {} }, custom: SidekiqServiceConfig { redis: Redis { uri: Url { scheme: "redis", cannot_be_a_base: false, username: "", password: None, host: Some(Domain("invalid_host")), port: Some(1234), path: "", query: None, fragment: None }, enqueue_pool: ConnectionPool { min_idle: None, max_connections: None }, fetch_pool: ConnectionPool { min_idle: None, max_connections: None }, test_container: None }, periodic: Periodic { stale_cleanup: AutoCleanStale } } } }, pg: ServiceConfig { common: CommonConfig { enable: None }, custom: WorkerConfig { common: CommonConfig { num_workers: 16, balance_strategy: RoundRobin, queues: None, queue_config: {} }, custom: WorkerPgServiceConfig { db_config: None, queue_fetch_config: Some(QueueFetchConfig { error_delay: Some(10s), empty_delay: Some(10s) }), periodic: Periodic { enable: true, stale_cleanup: AutoCleanStale } } } } }, custom: {} }, auth: Auth { jwt: Jwt { cookie_name: None, secret: "secret-test", claims: JwtClaims { audience: [], required_claims: [] } } }, tracing: Tracing { level: "debug", format: Compact, service_name: None, trace_propagation: true, trace_sampling_ratio: None, metrics_export_interval: None, trace_filters: ["h2=warn", "tower::buffer::worker=warn", "opentelemetry_sdk=warn", "opentelemetry-otlp=warn", "hyper_util::client::legacy::connect::http=warn"], otlp: None }, database: Database { uri: Url { scheme: "postgres", cannot_be_a_base: false, username: "example", password: Some("example"), host: Some(Domain("invalid_host")), port: Some(5432), path: "/example_test", query: None, fragment: None }, auto_migrate: true, temporary_test_db: false, temporary_test_db_clean_up: true, pool_config: DbPoolConfig { connect_timeout: 1s, connect_lazy: true, acquire_timeout: 1s, idle_timeout: None, max_lifetime: None, min_connections: 0, max_connections: 10, test_on_checkout: true, retry_connection: true }, test_container: None }, email: Email { from: Mailbox { name: None, email: Address { serialized: "no-reply@example.com", at_start: 8 } }, reply_to: None, smtp: Smtp { connection: Uri(SmtpConnectionUri { uri: Url { scheme: "smtps", cannot_be_a_base: false, username: "username", password: Some("password"), host: Some(Domain("smtp.example.com")), port: Some(425), path: "", query: None, fragment: None } }), pool: None }, sendgrid: Sendgrid { api_key: "api-key", sandbox: true, https_only: true } }, testing: Testing { catch_panic: true }, custom: CustomConfig { inner: {} } }
