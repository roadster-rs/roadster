{"author":{"id":"b588886e8ed752fadf1299e138ac3436c5eb556ee8e02466cae19fa663a1a8d8"},"ops":[{"type":5,"timestamp":1711386770,"nonce":"8siJIYn3PCTeqt0PbK3H3kiTOvo=","metadata":{"github-id":"LE_lADOLg8lJc6DgIOtzwAAAALZcGtX"},"added":["enhancement"],"removed":[]},{"type":3,"timestamp":1711940725,"nonce":"XOI9jXSFQgTYOGOSQNgAkYT3GIQ=","metadata":{"github-id":"IC_kwDOLg8lJc548UgA","github-url":"https://github.com/roadster-rs/roadster/issues/3#issuecomment-2029078528"},"message":"## [Faktory](https://crates.io/crates/faktory)\n\nThis crate integrates with Faktory, a language agnostic job queue from the creators of Sidekiq. Unfortunately, this\ncrate is not quite ready to be used in production. Some reasons why we're not using this crate:\n\n- No async support in job handlers\n- Not able to signal consumers to gracefully shut down\n- Job handlers can't use `anyhow`/`eyre` and instead need to use an `Error` type that implements `std::error::Error`.\n  This\n  can fairly easily be done using [thiserror](https://crates.io/crates/thiserror) to wrap `anyhow::Error`, but it's\n  still not ideal.\n    ```rust\n    // Example wrapping `anyhow::Error`\n    #[derive(Error, Debug)]\n    pub enum AnyhowWrapper {\n        #[error(transparent)]\n        Other(#[from] anyhow::Error),\n    }\n    \n    ```\n- The provided methods of enqueuing jobs decouple the queue name from the job handler. We would need (want) to create a\n  custom method of enqueueing jobs that automates providing the correct queue name.\n\n## [Apalis](https://crates.io/crates/apalis)\n\nTodo: [Evaluate using this](https://github.com/MassDissent/roadster/issues/3)\n\n## External/managed queues\n\nTodo: Evaluate using these instead of a self-hosted queue.\n\n- Kafka queue\n- SQS\n- Pub/Sub (e.g., Google Cloud's offering)","files":null},{"type":3,"timestamp":1736721790,"nonce":"JNgKNMN7DMThBwQXcPIOO1zx83w=","metadata":{"github-id":"IC_kwDOLg8lJc6aInAD","github-url":"https://github.com/roadster-rs/roadster/issues/3#issuecomment-2585948163"},"message":"Faktory now supports async and graceful shutdown, so we can look into supporting it. https://github.com/jonhoo/faktory-rs/blob/main/CHANGELOG.md#0130---2024-10-27","files":null}]}