{"author":{"id":"b588886e8ed752fadf1299e138ac3436c5eb556ee8e02466cae19fa663a1a8d8"},"ops":[{"type":1,"timestamp":1716777071,"nonce":"pTdnrXrz/zTUfKVC1tJNBhzxTrg=","metadata":{"github-id":"I_kwDOLg8lJc6KK2_G","github-url":"https://github.com/roadster-rs/roadster/issues/170","origin":"github"},"title":"Recommendation and examples of separate controllers vs APIs","message":"Ideally, the http (or grpc, etc) api handlers should be thin wrappers around the core business logic. In Rails, this concept is usually referred to as having thin controllers and fat models. This is great in theory, however, in my experience another layer on top of fat models is usually needed (often referred to as a concern or service in Rails), particularly when a domain/behavior involves many models. \n\nWe should have recommendations/examples of how to structure application logic in Roadster. What I’m thinking currently:\n- Put logic in models when it makes sense (validation, fetching repeated models, etc)\n- Additional logic (anything too complicated for a single model) goes into “controllers”\n- Controllers implement the bulk of the app’s logic (anything not attached directly to a model)\n- Controllers act as an internal API for the application, and their behavior is made available externally by thin api wrappers (e.g., and http api wrapper, or a grpc wrapper, or a CLI wrapper). These api wrappers should only be responsible for transforming the api input into the controller input, and vice versa for the controller response\n\nWith this approach, it should be fairly easy to reuse application logic, either in a new api type, or just in a separate part of the app","files":null}]}