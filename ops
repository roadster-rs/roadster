{"author":{"id":"b588886e8ed752fadf1299e138ac3436c5eb556ee8e02466cae19fa663a1a8d8"},"ops":[{"type":3,"timestamp":1737451010,"nonce":"6ZUF8HUCCd3eyLmMvAs7gZfHIiY=","metadata":{"github-id":"IC_kwDOLg8lJc6bN8OV","github-url":"https://github.com/roadster-rs/roadster/issues/575#issuecomment-2604123029"},"message":"My current approach is to get the service from the registry via a downcast. I think this will require removing the `add_service` method of the RoadsterApp builder and to just use the provider methods, at least as far as Iâ€™ve been able to figure out with my current level of rust knowledge. If we can figure out how to automatically implement an `as_any` method for the AppService trait (so we can get the `\u0026dyn Any` for the concrete service and not the `dyn AppService`), then we can keep the `add_service` method.","files":null},{"type":3,"timestamp":1737479112,"nonce":"Jf4n+KXLu6s0c8OO1F3hDR5IEUQ=","metadata":{"github-id":"IC_kwDOLg8lJc6bSYiQ","github-url":"https://github.com/roadster-rs/roadster/issues/575#issuecomment-2605287568"},"message":"Todo: double check if `AsAny` is auto-implemented for `dyn AppService`, or if it was calling the `Box` impl","files":null},{"type":3,"timestamp":1737499372,"nonce":"08gAyIzmxOXFL9p0EPFBIMahQ+A=","metadata":{"github-id":"IC_kwDOLg8lJc6bUrpk","github-url":"https://github.com/roadster-rs/roadster/issues/575#issuecomment-2605890148"},"message":"It looks like we can auto-impl an `AsAny` trait for the `AppService` trait if we change the type parameters to be associated types. This will break a lot of things but it's worth trying and maybe even applying as a general pattern elsewhere.","files":null},{"type":6,"timestamp":1737509865,"nonce":"BDz4WXp6QymVFThlVqMJyZpQ53k=","metadata":{"github-id":"UCE_lALOLg8lJc6bUrpkzlpkatY"},"target":"3716c9d53ce725558f1412ccd64677226bd586df3f13d4b924430b550e94f75a","message":"It looks like we can auto-impl an `AsAny` trait for the `AppService` trait if we change the type parameters to be associated types. This will break a lot of things but it's worth trying and maybe even applying as a general pattern elsewhere.\n\nHmm, this doesn't seem to quite work either because we still need to have a generic `App` type parameter when implementing the trait, and rust is saying that's unconstrained too. Also, I'm not sure we can represent the app state/context (`S`) type parameter as an associated type.","files":null},{"type":4,"timestamp":1737543814,"nonce":"X8ECANcLCBUio4hS3H3pUZpAJWY=","metadata":{"github-id":"CE_lADOLg8lJc6mxVxLzwAAAAO7TOXz"},"status":2},{"type":4,"timestamp":1737543814,"nonce":"HwOGgOfVHML3t2ucdZS+PeIVs6E=","metadata":{"github-id":"CE_lADOLg8lJc6mxVxLzwAAAAO7TOYF"},"status":2}]}