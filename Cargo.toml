[package]
name = "roadster"
version = "0.7.4"
edition = "2024"
publish = true
description = "A \"Batteries Included\" web framework for rust designed to get you moving fast."
repository = "https://github.com/roadster-rs/roadster"
license = "MIT OR Apache-2.0"
keywords = ["web", "framework"]
categories = ["web-programming", "web-programming::http-server"]
# Determined using `cargo msrv` -- https://github.com/foresterre/cargo-msrv
rust-version = "1.85"

# See more keys and their definitions at https://doc.rust-lang.org/cargo/reference/manifest.html

[features]
default = ["default-common", "db-sea-orm"]
default-common = ["sidekiq", "open-api", "jwt-ietf", "cli", "otel"]
# The same as `default`, except using `diesel` as the SQL ORM instead of `sea-orm`
default-diesel = ["default-common", "db-diesel-postgres-pool-async"]
http = ["dep:axum", "dep:axum-extra", "dep:tower", "dep:tower-http", "dep:http-body-util", "dep:mime"]
open-api = ["http", "dep:aide", "dep:schemars"]
worker = []
# The `sidekiq` feature is deprecated (renamed to `worker-sidekiq`)
sidekiq = ["worker-sidekiq"]
worker-sidekiq = ["worker", "dep:rusty-sidekiq", "dep:bb8", "dep:num_cpus"]
worker-pg = ["worker", "db-sql", "dep:pgmq", "dep:sqlx", "sea-orm?/sqlx-postgres"]
db-sql = []
db-sea-orm = ["db-sql", "dep:sea-orm", "dep:sea-orm-migration"]

# Diesel
## Core Diesel feature
db-diesel = ["db-sql", "dep:diesel", "dep:diesel_migrations"]
## Core DB backend features
db-diesel-postgres = ["db-diesel", "diesel/postgres"]
db-diesel-mysql = ["db-diesel", "diesel/mysql"]
db-diesel-sqlite = ["db-diesel", "diesel/sqlite"]
## Features to create (non-async) connection pools
db-diesel-pool = ["db-diesel", "dep:r2d2"]
db-diesel-postgres-pool = ["db-diesel-pool", "db-diesel-postgres"]
db-diesel-mysql-pool = ["db-diesel-pool", "db-diesel-mysql"]
db-diesel-sqlite-pool = ["db-diesel-pool", "db-diesel-sqlite"]
## Features to create async connection pools
db-diesel-pool-async = ["db-diesel", "dep:diesel-async", "dep:bb8_8"]
db-diesel-postgres-pool-async = ["db-diesel-pool-async", "db-diesel-postgres", "diesel-async/postgres"]
db-diesel-mysql-pool-async = ["db-diesel-pool-async", "db-diesel-mysql", "diesel-async/mysql"]

email = ["dep:lettre"]
email-smtp = ["email"]
email-sendgrid = ["email", "dep:sendgrid"]
jwt = ["dep:jsonwebtoken"]
jwt-ietf = ["jwt"]
jwt-openid = ["jwt"]
cli = ["dep:clap"]
otel = ["dep:opentelemetry", "dep:opentelemetry_sdk", "dep:opentelemetry-otlp", "dep:tracing-opentelemetry", "dep:prost"]
otel-grpc = ["otel", "opentelemetry-otlp/grpc-tonic"]
grpc = ["dep:tonic", "dep:tonic-reflection"]
testing = ["dep:insta", "dep:rstest", "dep:regex"]
test-containers = ["testing", "dep:testcontainers-modules"]
testing-mocks = ["testing", "dep:mockall", "sea-orm?/mock"]
config-yml = ["config/yaml"]

[dependencies]
# Config
# We only support `toml` configs currently, and one of the default features (`rust-ini`) pulls in a dependency
# that breaks the coverage build on nightly.
config = { workspace = true, features = ["async"] }
dotenvy = { workspace = true }

# Tracing
tracing = { workspace = true }
tracing-subscriber = { workspace = true }
opentelemetry-semantic-conventions = { workspace = true }
opentelemetry = { workspace = true, optional = true }
opentelemetry_sdk = { workspace = true, optional = true }
opentelemetry-otlp = { workspace = true, optional = true }
# Roadster technically doesn't need a direct dependency on `prost`, but we add one here to allow our
# `cargo minimal-versions check` check to pass -- `opentelemetry-proto` requires version `0.13.2` or higher
# in order to compile -- it fails to compile with `0.13.1` even though its dependencies don't specify `0.13.2`.
prost = { workspace = true, optional = true }
tracing-opentelemetry = { workspace = true, optional = true }

# HTTP APIs
# `axum-core` is not optional because we use the `FromRef` trait pretty extensively, even in parts of
# the code that wouldn't otherwise need `axum`.
axum-core = { workspace = true }
axum = { workspace = true, features = ["macros"], optional = true }
axum-extra = { workspace = true, features = ["typed-header", "cookie"], optional = true }
tower = { workspace = true, optional = true }
tower-http = { workspace = true, features = ["trace", "timeout", "request-id", "util", "normalize-path", "sensitive-headers", "catch-panic", "compression-full", "decompression-full", "limit", "cors", "set-header"], optional = true }
aide = { workspace = true, features = ["axum", "axum-json", "axum-query", "redoc", "scalar", "macros"], optional = true }
schemars = { workspace = true, optional = true }
http-body-util = { workspace = true, optional = true }
mime = { workspace = true, optional = true }

# DB - SeaORM
sea-orm = { workspace = true, features = ["debug-print", "runtime-tokio-rustls", "sqlx-postgres", "macros"], optional = true }
sea-orm-migration = { workspace = true, features = ["runtime-tokio-rustls", "sqlx-postgres"], optional = true }

# DB - Diesel
diesel = { workspace = true, features = ["extras"], optional = true }
diesel_migrations = { workspace = true, optional = true }
diesel-async = { workspace = true, features = ["bb8", "async-connection-wrapper", "sync-connection-wrapper", "tokio"], optional = true }
# r2d2 is used for non-async Diesel connection pools
r2d2 = { workspace = true, optional = true }
# bb8 is use for async Diesel connection pools
bb8_8 = { workspace = true, optional = true }

# Email
lettre = { workspace = true, features = ["serde"], optional = true }
sendgrid = { workspace = true, optional = true }

# Workers
## Sidekiq
rusty-sidekiq = { workspace = true, optional = true }
bb8 = { workspace = true, optional = true }
num_cpus = { workspace = true, optional = true }
## Postgres queue
pgmq = { workspace = true, optional = true }
sqlx = { workspace = true, optional = true }

# Rust async
tokio = { workspace = true, features = ["full"] }
tokio-util = { workspace = true }
async-trait = { workspace = true }

# Auth
jsonwebtoken = { workspace = true, optional = true }

# CLI
clap = { workspace = true, features = ["derive", "string"], optional = true }

# gRPC
tonic = { workspace = true, optional = true }
tonic-reflection = { workspace = true, optional = true }

# Testing
insta = { workspace = true, optional = true }
rstest = { workspace = true, optional = true }
testcontainers-modules = { workspace = true, features = ["postgres", "mysql", "redis"], optional = true }
mockall = { workspace = true, optional = true }

# Others
anyhow = { workspace = true }
serde = { workspace = true }
serde_derive = { workspace = true }
serde_json = { workspace = true }
serde_with = { workspace = true }
strum = { workspace = true }
strum_macros = { workspace = true }
itertools = { workspace = true }
toml = { workspace = true }
url = { workspace = true }
uuid = { workspace = true }
futures = { workspace = true }
chrono = { workspace = true, features = ["serde"] }
byte-unit = { workspace = true }
convert_case = { workspace = true }
const_format = { workspace = true }
typed-builder = { workspace = true }
num-traits = { workspace = true }
validator = { workspace = true }
thiserror = { workspace = true }
cfg-if = { workspace = true }
reqwest = { workspace = true }
regex = { workspace = true, optional = true }

[dev-dependencies]
roadster = { path = ".", features = ["testing"] }
cargo-husky = { workspace = true }
insta = { workspace = true, features = ["json", "redactions"] }
mockall = { workspace = true }
mockall_double = { workspace = true }
rstest = { workspace = true }
tokio-test = { workspace = true }

[build-dependencies]
rustc_version = { workspace = true }

[workspace]
members = [".", "examples/*", "book/examples/*", "private/*"]

[workspace.dependencies]
# Config
config = { version = "0.15.8", default-features = false, features = ["toml", "convert-case"] }
dotenvy = "0.15.7"

# Tracing
tracing = { version = "0.1.40", features = ["async-await"] }
tracing-subscriber = { version = "0.3.17", features = ["env-filter", "json"] }
opentelemetry-semantic-conventions = "0.29.0"
opentelemetry = { version = "0.29.0", features = ["trace", "metrics", "logs"] }
opentelemetry_sdk = { version = "0.29.0", features = ["tokio", "rt-tokio", "metrics", "logs", "trace"] }
opentelemetry-otlp = { version = "0.29.0", features = ["metrics", "trace", "logs"] }
# Roadster technically doesn't need a direct dependency on `prost`, but we add one here to allow our
# `cargo minimal-versions check` check to pass -- `opentelemetry-proto` requires version `0.13.2` or higher
# in order to compile -- it fails to compile with `0.13.1` even though its dependencies don't specify `0.13.2`.
prost = { version = "0.13.2" }
tracing-opentelemetry = { version = "0.30.0", features = ["metrics"] }

# HTTP APIs
aide = { version = "0.14.0", features = ["axum"] }
axum-core = "0.5.0"
axum = "0.8.1"
axum-extra = "0.10.0"
tower-http = "0.6.2"
tower = "0.5.2"
schemars = "0.8.16"
mime = "0.3.17"
http-body-util = { version = "0.1.2" }

# DB - SeaORM
sea-orm = { version = "1.1.11" }
sea-orm-migration = { version = "1.1.11" }

# DB - Diesel
diesel = { version = "2.2.3" }
diesel-async = { version = "0.5.2" }
diesel_migrations = { version = "2.2.0" }
r2d2 = { version = "0.8.4" }
# `diesel-async` is currently using `bb8-0.8`
bb8_8 = { package = "bb8", version = "0.8.1" }

# Email
lettre = { version = "0.11.0", default-features = false, features = ["smtp-transport", "pool", "rustls-tls", "hostname", "builder"] }
sendgrid = "0.23.0"

# CLI
clap = { version = "4.3.0", features = ["derive"] }

# Auth
jsonwebtoken = { version = "9.0.0" }

# gRPC
tonic = { version = "0.13.0" }
tonic-build = { version = "0.13.0" }
tonic-reflection = { version = "0.13.0" }

# Workers
## Sidekiq
# The default `rss-stats` feature has a dependency that currently can't be satisfied on macos (memchr: ~2.3)
rusty-sidekiq = { version = "0.13.1", default-features = false }
bb8 = { version = "0.9.0" }
num_cpus = { version = "1.13.0" }
## Postgres queue
pgmq = "0.30.1"
sqlx = { version = "0.8.0", features = ["postgres"] }

# Testing
insta = { version = "1.39.0", features = ["toml", "filters"] }
rstest = { version = "0.25.0", default-features = false }
testcontainers-modules = { version = "0.11.3" }
mockall = "0.13.0"
tower-util = "0.3.1"

# Others
tokio = { version = "1.43.0" }
# For CancellationToken
tokio-util = { version = "0.7.10" }
anyhow = "1.0.86"
serde = { version = "1.0.185", features = ["derive"] }
serde_derive = "1.0.185"
serde_json = "1.0.96"
serde_with = { version = "3.7.0", features = ["macros", "chrono_0_4"] }
strum = "0.27.0"
strum_macros = "0.27.0"
toml = "0.8.0"
url = { version = "2.5.0", features = ["serde"] }
futures = "0.3.31"
futures-core = "0.3.31"
byte-unit = { version = "5.0.0", features = ["serde"] }
convert_case = "0.8.0"
const_format = "0.2.33"
num-traits = "0.2.18"
validator = { version = "0.20.0", features = ["derive"] }
cfg-if = "1.0.0"
vergen = { version = "9.0.0" }
vergen-gitcl = { version = "1.0.0" }
reqwest = { version = "0.12.8", default-features = false, features = ["rustls-tls", "charset", "http2", "macos-system-configuration"] }
itertools = "0.14.0"
cargo-manifest = "0.19.1"
typed-builder = "0.21.0"
rand = "0.9.0"
thiserror = "2.0.9"
uuid = { version = "1.11.0", features = ["v4", "serde"] }
chrono = { version = "0.4.34", features = ["serde"] }
async-trait = "0.1.81"
regex = "1.11.1"

# Build dependencies
rustc_version = "0.4.1"

# Dev dependencies
cargo-husky = { version = "1.5.0", default-features = false, features = ["user-hooks"] }
mockall_double = "0.3.1"
tokio-test = "0.4.4"
fake = { version = "4.0.0" }

[package.metadata.docs.rs]
# Have docs.rs pass `--all-features` to ensure all features have their documentation built.
all-features = true

[lints.rust]
unexpected_cfgs = { level = "allow", check-cfg = ['cfg(coverage_nightly)'] }
